{"ast":null,"code":"import socketIOClient from 'socket.io-client';\nimport { useState, useEffect, useRef } from 'react';\n\nconst useSocket = () => {\n  const [typingUsrs, setTypingUsrs] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [seenState, setSeen] = useState(true);\n  const [seenUsrs, setSeenUsrs] = useState([]);\n  const socketRef = useRef(); // while(true){\n  //    const usr = prompt('Tell us your name')\n  //    if(usr !== null ) break\n  // }\n\n  useEffect(() => {\n    // setUsr(prompt('Tell us your name'))\n    socketRef.current = socketIOClient('http://localhost:5000');\n    socketRef.current.on('typing', usr => {\n      setTypingUsrs(typingUsrs => [...typingUsrs, usr]); // console.log(`${usr} is typing`)\n    });\n    socketRef.current.on('message', msg => {\n      setMessages(messages => [...messages, msg]);\n      setSeen(false);\n    });\n    socketRef.current.on('seen', usr => {\n      setSeenUsrs(seenUsrs => [...seenUsrs, usr]); // console.log(`seen by ${usr}`)\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  const typing = () => {\n    socketRef.current.emit('typing', usr);\n  };\n\n  const send = msg => {\n    socketRef.current.emit('message', msg, usr);\n  };\n\n  const seen = usr => {\n    !seenState && socketRef.current.emit('seen', usr) && setSeen(true);\n  };\n\n  return {\n    messages,\n    send,\n    typing,\n    seen\n  };\n};\n\nexport default useSocket;","map":{"version":3,"sources":["/home/salman/.local/share/dot_files/Storage/Workspace/soulfly/client/src/useSocket.js"],"names":["socketIOClient","useState","useEffect","useRef","useSocket","typingUsrs","setTypingUsrs","messages","setMessages","seenState","setSeen","seenUsrs","setSeenUsrs","socketRef","current","on","usr","msg","disconnect","typing","emit","send","seen"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACrB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,SAAD,EAAYC,OAAZ,IAAuBT,QAAQ,CAAC,IAAD,CAArC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMY,SAAS,GAAGV,MAAM,EAAxB,CANqB,CAQrB;AACA;AACA;AACA;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEb;AAEAW,IAAAA,SAAS,CAACC,OAAV,GAAoBd,cAAc,CAAC,uBAAD,CAAlC;AAEAa,IAAAA,SAAS,CAACC,OAAV,CAAkBC,EAAlB,CAAqB,QAArB,EAA+BC,GAAG,IAAI;AACnCV,MAAAA,aAAa,CAACD,UAAU,IAAI,CAAE,GAAGA,UAAL,EAAiBW,GAAjB,CAAf,CAAb,CADmC,CAEnC;AACF,KAHD;AAKAH,IAAAA,SAAS,CAACC,OAAV,CAAkBC,EAAlB,CAAqB,SAArB,EAAgCE,GAAG,IAAI;AACpCT,MAAAA,WAAW,CAACD,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcU,GAAd,CAAb,CAAX;AACAP,MAAAA,OAAO,CAAC,KAAD,CAAP;AACF,KAHD;AAKAG,IAAAA,SAAS,CAACC,OAAV,CAAkBC,EAAlB,CAAqB,MAArB,EAA6BC,GAAG,IAAI;AACjCJ,MAAAA,WAAW,CAAED,QAAQ,IAAI,CAAE,GAAGA,QAAL,EAAeK,GAAf,CAAd,CAAX,CADiC,CAEjC;AACF,KAHD;AAKA,WAAO,MAAM;AACVH,MAAAA,SAAS,CAACC,OAAV,CAAkBI,UAAlB;AACF,KAFD;AAGF,GAxBQ,EAwBN,EAxBM,CAAT;;AA0BA,QAAMC,MAAM,GAAG,MAAM;AAClBN,IAAAA,SAAS,CAACC,OAAV,CAAkBM,IAAlB,CAAuB,QAAvB,EAAiCJ,GAAjC;AACF,GAFD;;AAIA,QAAMK,IAAI,GAAGJ,GAAG,IAAI;AACjBJ,IAAAA,SAAS,CAACC,OAAV,CAAkBM,IAAlB,CAAuB,SAAvB,EAAkCH,GAAlC,EAAuCD,GAAvC;AACF,GAFD;;AAIA,QAAMM,IAAI,GAAGN,GAAG,IAAI;AACjB,KAACP,SAAD,IAAcI,SAAS,CAACC,OAAV,CAAkBM,IAAlB,CAAuB,MAAvB,EAA+BJ,GAA/B,CAAd,IAAqDN,OAAO,CAAC,IAAD,CAA5D;AACF,GAFD;;AAIA,SAAO;AAAEH,IAAAA,QAAF;AAAYc,IAAAA,IAAZ;AAAkBF,IAAAA,MAAlB;AAA0BG,IAAAA;AAA1B,GAAP;AAEF,CArDD;;AAuDA,eAAelB,SAAf","sourcesContent":["import socketIOClient from 'socket.io-client';\nimport { useState, useEffect, useRef } from 'react';\n\nconst useSocket = () => {\n   const [typingUsrs, setTypingUsrs] = useState([]);\n   const [messages, setMessages] = useState([]);\n   const [seenState, setSeen] = useState(true);\n   const [seenUsrs, setSeenUsrs] = useState([]);\n\n   const socketRef = useRef();\n\n   // while(true){\n   //    const usr = prompt('Tell us your name')\n   //    if(usr !== null ) break\n   // }\n\n   useEffect(() => {\n\n      // setUsr(prompt('Tell us your name'))\n\n      socketRef.current = socketIOClient('http://localhost:5000');\n\n      socketRef.current.on('typing', usr => {\n         setTypingUsrs(typingUsrs => [ ...typingUsrs, usr ])\n         // console.log(`${usr} is typing`)\n      })\n\n      socketRef.current.on('message', msg => {\n         setMessages(messages => [...messages, msg ])\n         setSeen(false)\n      })\n\n      socketRef.current.on('seen', usr => {\n         setSeenUsrs( seenUsrs => [ ...seenUsrs, usr ] )\n         // console.log(`seen by ${usr}`)\n      })\n\n      return () => {\n         socketRef.current.disconnect();\n      };\n   }, []);\n\n   const typing = () => {\n      socketRef.current.emit('typing', usr);\n   };\n\n   const send = msg => {\n      socketRef.current.emit('message', msg, usr);\n   };\n\n   const seen = usr => {\n      !seenState && socketRef.current.emit('seen', usr) && setSeen(true)\n   };\n\n   return { messages, send, typing, seen };\n\n};\n\nexport default useSocket;\n"]},"metadata":{},"sourceType":"module"}